CREATE TABLE USER(
                     ID INTEGER PRIMARY KEY AUTOINCREMENT,
                     NAME VARCHAR(50) NOT NULL,
                     EMAIL VARCHAR(50) NOT NULL,
                     PASSWORD VARCHAR(50) NOT NULL
);

INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ('admin 1', 'admin@localhost', 'admin');
INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ('user 1', 'user1@localhost', 'pass1');
INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ('user 2', 'user2@localhost', 'pass2');
INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ('user 3', 'user3@localhost', 'pass3');
INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ('user 4', 'user4@localhost', 'pass4');
INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ('user 5', 'user5@localhost', 'pass5');
INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ('user 6', 'user6@localhost', 'pass6');
INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ('user 7', 'user7@localhost', 'pass7');
INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ('user 8', 'user8@localhost', 'pass8');
INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ( 'user 9', 'user9@localhost', 'pass9');
INSERT INTO USER(NAME, EMAIL, PASSWORD) VALUES ('user 10', 'user10@localhost', 'pass10');

SELECT * FROM USER;



CREATE TABLE POSTS(
                      ID INTEGER PRIMARY KEY AUTOINCREMENT,
                      USER_ID INT REFERENCES USER(ID),
                      TITLE VARCHAR(50) NOT NULL,
                      CONTENT VARCHAR(50)
);

INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (1, 'admin title 1', 'admin content 1');
INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (1, 'admin title 2', 'admin content 2');
INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (1, 'admin title 3', 'admin content 3');
INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (2, 'user title 1', 'user content 1');
INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (3, 'user title 2', 'user content 2');
INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (4, 'user title 3', 'user content 3');
INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (5, 'user title 4', 'user content 4');
INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (6, 'user title 5', 'user content 5');
INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (7, 'user title 6', 'user content 6');
INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (8, 'user title 7', 'user content 7');
INSERT INTO POSTS(USER_ID, TITLE, CONTENT) VALUES (9, 'user title 8', 'user content 8');

SELECT * FROM POSTS;

-- IN CASE OF M * N MAPPING A SEPARATE TABLE IS CREATED

CREATE TABLE SHARED_POSTS(
                             POST_ID INTEGER REFERENCES POSTS(ID),
                             USER_ID INTEGER REFERENCES USER(ID)
);


-- ADD CONSTRAINTS TO TABLE FOR NULL ENTRY CHECK

ALTER TABLE SHARED_POSTS
    ADD "CONSTRAINT" CONSTRAINT_CHECK
        CHECK (
            POST_ID IS NOT NULL AND
            USER_ID IS NOT NULL
            );

-- ADD TRIGGER TO CHECK IF USER_ID IS OWNER OF POST_ID

CREATE TRIGGER IF NOT EXISTS CHECK_USER_IS_OWNER_OF_POST
BEFORE INSERT ON SHARED_POSTS
FOR EACH ROW
BEGIN
SELECT
    CASE
        WHEN EXISTS (
            SELECT 1
            FROM POSTS
            WHERE POSTS.ID = NEW.POST_ID AND POSTS.USER_ID = NEW.USER_ID
        ) THEN RAISE(FAIL, 'USER_ID cannot match the USER_ID of the POST_ID in POSTS.')
        END;
END;

INSERT INTO SHARED_POSTS VALUES (1 , 2 , 0 );
INSERT INTO SHARED_POSTS VALUES (1 ,  2, 0 );
INSERT INTO SHARED_POSTS VALUES (1 , 2 , 0 );
INSERT INTO SHARED_POSTS VALUES (1 , 3 , 0 );
INSERT INTO SHARED_POSTS VALUES (2 , 3 , 0 );
INSERT INTO SHARED_POSTS VALUES (3 , 3 , 0 );
INSERT INTO SHARED_POSTS VALUES (1 , 4 , 0 );
INSERT INTO SHARED_POSTS VALUES (2 , 4 , 0 );

-- IF SOME VALUES WERE ALREADY IN TABLE

DELETE FROM SHARED_POSTS WHERE
    SHARED_POSTS.USER_ID IN (
        SELECT USER_ID FROM POSTS WHERE POSTS.ID = SHARED_POSTS.POST_ID
    );

-- ADD TRIGGER TO CHECK IF USER_ID AND POST_ID ALREADY EXISTS IN TABLE

CREATE TRIGGER IF NOT EXISTS CHECK_USER_AND_POST_ALREADY_EXISTS
    BEFORE INSERT ON SHARED_POSTS
    FOR EACH ROW
BEGIN
SELECT
    CASE
        WHEN EXISTS(
            SELECT 1 FROM SHARED_POSTS
            WHERE SHARED_POSTS.POST_ID = NEW.POST_ID AND
                SHARED_POSTS.USER_ID = NEW.USER_ID
        ) THEN RAISE(FAIL , 'USER_ID AND POST_ID ALREADY EXISTS IN TABLE')
        END;
end;

-- IF SOME VALUES WERE ALREADY IN TABLE

DELETE FROM SHARED_POSTS
WHERE ROWID NOT IN (
    SELECT MIN(ROWID)
    FROM SHARED_POSTS
    GROUP BY USER_ID, POST_ID
);

-- GET POST DETAILS FROM POST IF USER_ID IS OWNER OF POST
SELECT * FROM POSTS WHERE USER_ID = 1 AND ID = 1;

-- NO DETAILS SINCE USER_ID IS NOT OWNER OF POST
SELECT * FROM POSTS WHERE USER_ID = 4 AND ID = 1;

-- GET POST DETAILS FROM POST IS SHARED WITH USER
SELECT * FROM POSTS WHERE ID IN (
    SELECT POST_ID FROM SHARED_POSTS WHERE SHARED_POSTS.USER_ID = 4 AND POST_ID = 1
);

-- GET DATA OF USER AND ALL THE POSTS OWNED BY USER.ID = 1
SELECT * FROM USER JOIN POSTS P on USER.ID = P.USER_ID WHERE USER.ID = 1;

-- GET DATA OF USER AND ALL THE POSTS SHARED WITH USER.ID = 3
SELECT * FROM USER JOIN SHARED_POSTS SP on USER.ID = SP.USER_ID WHERE USER.ID = 3;

-- GET DATA OF USER AS PER SPECIFIC POST.ID = 1 SHARED WITH USER
SELECT U.ID , U.EMAIL , U.NAME FROM SHARED_POSTS SP JOIN POSTS P on P.ID = SP.POST_ID JOIN USER U ON U.ID = SP.USER_ID WHERE P.ID = 1;